{"version":3,"sources":["webpack:///src/app/pages/sign-in/services/sign-in.service.ts","webpack:///src/app/pages/sign-in/sign-in.component.ts","webpack:///src/app/pages/sign-in/sign-in.component.html","webpack:///src/app/pages/sign-in/sign-in.module.ts","webpack:///src/app/pages/sign-in/sign-in-routing.module.ts"],"names":["SignInService","fb","group","email","required","password","control","hasError","SignInComponent","localSignInService","store","destroy","signInForm","get","createForm","getState$","select","getErrorMessage","dispatch","payload","value","onSignIn","SignInModule","routes","path","component","SignInRoutingModule","forChild"],"mappings":"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","file":"sign-in-sign-in-module-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Injectable()\nexport class SignInService {\n\n  constructor(\n    private fb: FormBuilder,\n  ) { }\n\n  public createForm(): FormGroup {\n    return this.fb.group({\n      email: ['admin@admin.admin', Validators.required],\n      password: ['admin', Validators.required],\n    });\n  }\n\n  public getErrorMessage(control: FormGroup): string {\n    if (!control) {\n      return;\n    }\n\n    return control.hasError('required') ? 'Field is required' : '';\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { Store } from '@ngrx/store';\n\nimport { SignInService as LocalSignInService } from '@app/pages/sign-in/services/sign-in.service';\nimport { AppState } from '@root-store/state';\n\nimport { Auth } from '@root-store/auth/state';\nimport * as AuthSelectors from '@root-store/auth/selectors/auth.selectors';\nimport * as AuthActions from '@root-store/auth/actions/auth.actions';\n\n@Component({\n  selector: 'app-sign-in',\n  templateUrl: './sign-in.component.html',\n  styleUrls: ['./sign-in.component.scss']\n})\nexport class SignInComponent implements OnInit {\n  destroy: ReplaySubject<any> = new ReplaySubject<any>(1);\n\n  signInForm: FormGroup;\n\n  getState$: Observable<Auth>;\n\n  get email(): FormGroup {\n    return this.signInForm.get('email') as FormGroup;\n  }\n\n  get password(): FormGroup {\n    return this.signInForm.get('password') as FormGroup;\n  }\n\n  constructor(\n    private localSignInService: LocalSignInService,\n    private store: Store<AppState>\n  ) { }\n\n  ngOnInit(): void {\n    this.signInForm = this.localSignInService.createForm();\n    this.getState$ = this.store.select(AuthSelectors.getAuth);\n  }\n\n  public getErrorMessage(control: FormGroup): string {\n    return this.localSignInService.getErrorMessage(control);\n  }\n\n  public onSignIn(): void {\n    this.store.dispatch(AuthActions.auth({payload: this.signInForm.value}));\n  }\n\n}\n","<div class=\"signin-wrap\">\n  <form class=\"signin-form\" [formGroup]=\"signInForm\" (submit)=\"onSignIn()\">\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Email</mat-label>\n      <input autofocus matInput placeholder=\"Enter your email\" formControlName=\"email\">\n      <mat-error *ngIf=\"email?.invalid\">{{getErrorMessage(email)}}</mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Password</mat-label>\n      <input matInput placeholder=\"Enter your password\" formControlName=\"password\" type=\"password\">\n      <mat-error *ngIf=\"password?.invalid\">{{getErrorMessage(password)}}</mat-error>\n    </mat-form-field>\n\n    <button class=\"signin-form__btn\" type=\"submit\" mat-raised-button color=\"primary\">\n      <ng-container *ngIf=\"!(getState$ | async)?.isFetching\">\n        SignIn\n      </ng-container>\n      <ng-container *ngIf=\"(getState$ | async)?.isFetching\">\n        <mat-spinner diameter=\"25\" color=\"#ffffff\"></mat-spinner>\n      </ng-container>\n\n    </button>\n\n  </form>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SharedModule } from '@app/shared/shared.module';\nimport { SignInRoutingModule } from './sign-in-routing.module';\n\nimport { SignInService } from '@app/pages/sign-in/services/sign-in.service';\n\nimport { SignInComponent } from './sign-in.component';\n\n@NgModule({\n  declarations: [SignInComponent],\n  imports: [\n    CommonModule,\n    SharedModule,\n    SignInRoutingModule\n  ],\n  providers: [SignInService]\n})\nexport class SignInModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SignInComponent } from '@app/pages/sign-in/sign-in.component';\n\nconst routes: Routes = [{\n  path: '',\n  component: SignInComponent\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SignInRoutingModule { }\n"]}